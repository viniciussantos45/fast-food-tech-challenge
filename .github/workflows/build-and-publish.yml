name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: us-east-1

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.4
        with:
          node-version: '18.x'

      - name: Enable Corepack
        run: corepack enable

      - name: Install correct Yarn version
        run: corepack yarn set version 4.3.1

      - name: Install dependencies
        run: yarn install

      # If needed to build via NPM
      # - name: Install dependencies
      #   run: npm install

      # - name: Lint code
      #   uses: github/super-linter@v7
      #   env:
      #     DEFAULT_BRANCH: main
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: yarn test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag fast-food-order:v1

      - name: Configure aws cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Create ECR repository
        run: |
          aws ecr describe-repositories --repository-names fast-food-order || \
          aws ecr create-repository --repository-name fast-food-order

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Tag Docker image for ECR
        run: |
          docker tag fast-food-order:v1 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/fast-food-order:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/fast-food-order:latest

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        id: install

      - name: Configure kubectl
        run: aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: kubectl apply -f K8S/db -f K8S/app
